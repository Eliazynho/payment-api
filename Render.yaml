# render.yaml - Blueprint para deploy da API de Pagamentos no Render.com

# 1. Definição do Banco de Dados PostgreSQL
# Cria uma instância de banco de dados gerenciada.
databases:
  - name: payment-api-db # Nome do serviço de banco de dados
    databaseName: payment_challenge # Nome do banco de dados real
    user: elias_santos_dev # Nome de usuário para acessar o banco
    plan: free # Começa no plano gratuito, pode ser alterado para "starter", etc.

# 2. Definição dos Serviços da Aplicação
services:
  # a. Job de Migração do Banco de Dados
  # Este serviço roda ANTES de cada deploy do serviço principal.
  # Sua única função é aplicar as migrações do Prisma.
  - type: pre_deploy # Tipo especial: roda antes do deploy
    name: payment-api-migrator
    plan: free
    # Instala as dependências e gera o Prisma Client
    buildCommand: npm install && npx prisma generate
    # Roda o comando de migração não-interativo, seguro para produção
    startCommand: npx prisma migrate deploy
    # Precisa da mesma variável de ambiente do serviço principal para se conectar ao banco
    envVars:
      - key: DATABASE_URL
        fromDatabase:
          name: payment-api-db
          property: connectionString

  # b. Serviço Principal da API (Aplicação NestJS)
  - type: web # Tipo de serviço: uma aplicação web que recebe tráfego HTTP
    name: payment-api
    runtime: node
    plan: free # Começa no plano gratuito
    # Garanta que esta URL aponta para o seu repositório
    repo: https://github.com/Eliazynho/payment-api
    branch: main
    # Comandos para construir a aplicação em ambiente de produção
    buildCommand: npm install && npm run build
    # Comando para iniciar a aplicação após o build
    startCommand: npm run start:prod
    # Caminho do Health Check que implementamos para o Render validar o deploy
    healthCheckPath: /health
    # Variáveis de ambiente
    envVars:
      - key: NODE_ENV
        value: production
      - key: PORT # Render define a porta, nossa app está configurada para usá-la
        value: 10000
      # Conecta a aplicação ao banco de dados criado acima
      - key: DATABASE_URL
        fromDatabase:
          name: payment-api-db
          property: connectionString
